"""
Tests for security fixes applied from QA review.
"""

import pytest
import tempfile
import os
from flask import url_for
from app import create_app, db
from app.models.user import User
from app.models.sponsor import Sponsor


@pytest.fixture
def csrf_app():
    """Create an app with CSRF enabled for testing CSRF protection."""
    db_fd, db_path = tempfile.mkstemp()
    
    app = create_app("testing")
    app.config.update({
        "TESTING": True,
        "WTF_CSRF_ENABLED": True,  # Enable CSRF for this test
        "SQLALCHEMY_DATABASE_URI": f"sqlite:///{db_path}",
    })
    
    with app.app_context():
        db.create_all()
        yield app
        db.drop_all()
    
    os.close(db_fd)
    os.unlink(db_path)


@pytest.fixture
def csrf_client(csrf_app):
    """Create a test client with CSRF protection enabled."""
    return csrf_app.test_client()


@pytest.fixture
def sponsor(app):
    """Create a test sponsor."""
    with app.app_context():
        sponsor = Sponsor(
            name="Test Organization",
            email="test@organization.rs",
            crossref_member_id="1234"
        )
        sponsor.save()
        return sponsor


@pytest.fixture
def test_user(app, sponsor):
    """Create a test user."""
    with app.app_context():
        user = User.create_user(
            email="test@example.com",
            password="testpassword123",
            full_name="Test User",
            role="admin"
        )
        return user


class TestCSRFProtection:
    """Test CSRF protection in login form."""

    def test_csrf_token_present_in_login_form(self, client):
        """Test that CSRF token is present in login form."""
        response = client.get('/auth/login')
        assert response.status_code == 200
        
        # Check for CSRF token hidden input field generated by hidden_tag()
        assert b'name="csrf_token"' in response.data

    def test_csrf_protection_active(self, csrf_client):
        """Test that CSRF protection is active and blocks requests without token."""
        # Try to login without CSRF token should fail
        response = csrf_client.post('/auth/login', data={
            'email': 'test@example.com',
            'password': 'testpassword123'
        }, follow_redirects=False)
        
        # Should get 400 Bad Request due to missing CSRF token
        assert response.status_code == 400


class TestRateLimiting:
    """Test rate limiting on login endpoint."""

    def test_rate_limiting_login_endpoint(self, client, test_user):
        """Test that rate limiting is applied to login endpoint."""
        # Make multiple rapid login attempts
        for i in range(6):  # Exceed the 5 per minute limit
            response = client.post('/auth/login', data={
                'email': f'user{i}@test.com',
                'password': 'wrongpassword'
            }, follow_redirects=False)
            
            if i < 5:
                # First 5 attempts should get through (may be 400 due to CSRF)
                assert response.status_code in [200, 400, 302]
            else:
                # 6th attempt should be rate limited
                assert response.status_code == 429


class TestSessionSecurity:
    """Test session security configuration."""

    def test_session_cookie_httponly(self, app):
        """Test that session cookies are set to HTTPOnly."""
        assert app.config['SESSION_COOKIE_HTTPONLY'] is True

    def test_session_cookie_samesite(self, app):
        """Test that session cookies have SameSite protection."""
        assert app.config['SESSION_COOKIE_SAMESITE'] == 'Lax'

    def test_session_cookie_secure_in_production(self):
        """Test that session cookies are secure in production config."""
        from config import ProductionConfig
        prod_config = ProductionConfig()
        assert prod_config.SESSION_COOKIE_SECURE is True

    def test_session_cookie_not_secure_in_development(self):
        """Test that session cookies are not secure in development (no HTTPS)."""
        from config import DevelopmentConfig
        dev_config = DevelopmentConfig()
        assert dev_config.SESSION_COOKIE_SECURE is False


class TestSecurityHeaders:
    """Test that security headers are still present after changes."""

    def test_security_headers_present(self, client):
        """Test that security headers are present in responses."""
        response = client.get('/auth/login')
        
        assert response.headers.get('X-Content-Type-Options') == 'nosniff'
        assert response.headers.get('X-Frame-Options') == 'DENY'
        assert response.headers.get('X-XSS-Protection') == '1; mode=block'